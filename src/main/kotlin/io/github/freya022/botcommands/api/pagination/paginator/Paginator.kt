package io.github.freya022.botcommands.api.pagination.paginator

import io.github.freya022.botcommands.api.core.BContext
import io.github.freya022.botcommands.api.pagination.AbstractPaginationBuilder
import io.github.freya022.botcommands.api.pagination.PageEditor
import io.github.freya022.botcommands.api.pagination.Paginators
import io.github.freya022.botcommands.api.utils.ButtonContent
import net.dv8tion.jda.api.EmbedBuilder
import net.dv8tion.jda.api.utils.messages.MessageCreateBuilder

/**
 * Classic paginator, where each page is generated by a [PageEditor].
 *
 * @see Paginators.paginator
 */
class Paginator internal constructor(
    context: BContext,
    builder: PaginatorBuilder
) : AbstractPaginator<Paginator>(
    context,
    builder
) {
    private val editor: PageEditor<Paginator> = builder.pageEditor

    override var maxPages: Int = builder.maxPages

    init {
        check(maxPages > 0) { "Max pages must be > 0" }
    }

    override fun writeMessage(builder: MessageCreateBuilder) {
        super.writeMessage(builder)

        val embedBuilder = EmbedBuilder()
        editor.accept(this, builder, embedBuilder, page)
        builder.setEmbeds(embedBuilder.build())
    }

    object Defaults {
        /** @see AbstractPaginationBuilder.cleanAfterRefresh */
        @JvmStatic
        var cleanAfterRefresh: Boolean = true

        /** @see PaginatorBuilder.setFirstContent */
        @JvmStatic
        var firstPageButtonContent: ButtonContent = ButtonContent.withShortcode("rewind")

        /** @see PaginatorBuilder.setPreviousContent */
        @JvmStatic
        var previousPageButtonContent: ButtonContent = ButtonContent.withShortcode("arrow_backward")

        /** @see PaginatorBuilder.setNextContent */
        @JvmStatic
        var nextPageButtonContent: ButtonContent = ButtonContent.withShortcode("arrow_forward")

        /** @see PaginatorBuilder.setLastContent */
        @JvmStatic
        var lastPageButtonContent: ButtonContent = ButtonContent.withShortcode("fast_forward")

        /** @see PaginatorBuilder.setDeleteContent */
        @JvmStatic
        var deleteButtonContent: ButtonContent = ButtonContent.withShortcode("wastebasket")

        /** @see PaginatorBuilder.useDeleteButton */
        @JvmStatic
        var useDeleteButton: Boolean = false
    }
}
