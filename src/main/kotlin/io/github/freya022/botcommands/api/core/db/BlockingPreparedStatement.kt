@file:Suppress("DeprecatedCallableAddReplaceWith")

package io.github.freya022.botcommands.api.core.db

import org.slf4j.Logger
import java.sql.PreparedStatement
import java.sql.ResultSet
import io.github.freya022.botcommands.api.core.db.withLogger as withLoggerExt

class BlockingPreparedStatement internal constructor(preparedStatement: PreparedStatement) : AbstractPreparedStatement(preparedStatement) {
    /**
     * Sets the logger used to log the query.
     *
     * This is a no-op if tracing is not enabled, see the full conditions on [Database].
     */
    fun withLogger(logger: Logger) = withLoggerExt(logger)
    /**
     * Sets the logger used to log the query.
     *
     * This is a no-op if tracing is not enabled, see the full conditions on [Database].
     */
    fun withLogger(name: String) = withLoggerExt(name)

    /**
     * Executes the SQL statement in this PreparedStatement object with the supplied parameters.
     *
     * The parameters are set in the order they are passed in,
     * supported types are implementation-specific,
     * see [PreparedStatement.setObject] and its implementation by your JDBC driver.
     *
     * @see PreparedStatement.execute
     */
    fun execute(vararg params: Any?): Boolean {
        setParameters(params)
        return preparedStatement.execute()
    }

    /**
     * Executes the SQL statement in this PreparedStatement object with the supplied parameters.
     *
     * The parameters are set in the order they are passed in,
     * supported types are implementation-specific,
     * see [PreparedStatement.setObject] and its implementation by your JDBC driver.
     *
     * @see PreparedStatement.executeUpdate
     */
    fun executeUpdate(vararg params: Any?): Int {
        setParameters(params)
        return preparedStatement.executeUpdate()
    }

    /**
     * Executes the SQL statement in this PreparedStatement object with the supplied parameters,
     * and returns a [DBResult] with the [generated keys][PreparedStatement.getGeneratedKeys].
     *
     * The parameters are set in the order they are passed in,
     * supported types are implementation-specific,
     * see [PreparedStatement.setObject] and its implementation by your JDBC driver.
     *
     * @see PreparedStatement.executeUpdate
     */
    fun executeReturningUpdate(vararg params: Any?): DBResult {
        setParameters(params)
        preparedStatement.executeUpdate()
        return generatedKeys
    }

    /**
     * Executes the SQL statement in this PreparedStatement object with the supplied parameters.
     *
     * The parameters are set in the order they are passed in,
     * supported types are implementation-specific,
     * see [PreparedStatement.setObject] and its implementation by your JDBC driver.
     *
     * @see PreparedStatement.executeQuery
     */
    fun executeQuery(vararg params: Any?): DBResult {
        setParameters(params)
        return DBResult(preparedStatement.executeQuery())
    }

    // region execute

    @Deprecated("This is never usable as this is a prepared statement", level = DeprecationLevel.ERROR)
    override fun execute(sql: String?): Boolean = throw UnsupportedOperationException()

    @Deprecated("This is never usable as this is a prepared statement", level = DeprecationLevel.ERROR)
    override fun execute(sql: String?, columnNames: Array<out String>?): Boolean = throw UnsupportedOperationException()

    @Deprecated("This is never usable as this is a prepared statement", level = DeprecationLevel.ERROR)
    override fun execute(sql: String?, autoGeneratedKeys: Int): Boolean = throw UnsupportedOperationException()

    @Deprecated("This is never usable as this is a prepared statement", level = DeprecationLevel.ERROR)
    override fun execute(sql: String?, columnIndexes: IntArray?): Boolean = throw UnsupportedOperationException()

    // endregion

    // region executeUpdate

    @Deprecated("This is never usable as this is a prepared statement", level = DeprecationLevel.ERROR)
    override fun executeUpdate(sql: String?): Int = throw UnsupportedOperationException()

    @Deprecated("This is never usable as this is a prepared statement", level = DeprecationLevel.ERROR)
    override fun executeUpdate(sql: String?, columnIndexes: IntArray?): Int = throw UnsupportedOperationException()

    @Deprecated("This is never usable as this is a prepared statement", level = DeprecationLevel.ERROR)
    override fun executeUpdate(sql: String?, autoGeneratedKeys: Int): Int = throw UnsupportedOperationException()

    @Deprecated("This is never usable as this is a prepared statement", level = DeprecationLevel.ERROR)
    override fun executeUpdate(sql: String?, columnNames: Array<out String>?): Int = throw UnsupportedOperationException()

    // endregion

    // region executeQuery

    @Deprecated("This is never usable as this is a prepared statement", level = DeprecationLevel.ERROR)
    override fun executeQuery(sql: String?): ResultSet = throw UnsupportedOperationException()

    // endregion
}